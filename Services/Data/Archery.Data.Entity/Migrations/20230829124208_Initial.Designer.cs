// <auto-generated />
using System;
using Archery.Data.Entity;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Archery.Data.Entity.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20230829124208_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Archery.Data.Entity.Lane", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("Identifier")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("Identifier")
                        .IsUnique();

                    b.ToTable("Lane", (string)null);
                });

            modelBuilder.Entity("Archery.Data.Entity.League", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("League", (string)null);
                });

            modelBuilder.Entity("Archery.Data.Entity.Member", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("IdentityKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Member", (string)null);
                });

            modelBuilder.Entity("Archery.Data.Entity.Player", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("MemberID")
                        .HasColumnType("int");

                    b.Property<int>("TeamID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("MemberID");

                    b.HasIndex("TeamID", "MemberID")
                        .IsUnique();

                    b.ToTable("Player", (string)null);
                });

            modelBuilder.Entity("Archery.Data.Entity.Reservation", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("TeamID")
                        .HasColumnType("int");

                    b.Property<int>("TournamentID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("TeamID");

                    b.HasIndex("TournamentID");

                    b.ToTable("Reservation", (string)null);
                });

            modelBuilder.Entity("Archery.Data.Entity.Score", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("PlayerID")
                        .HasColumnType("int");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<int>("SetID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("PlayerID");

                    b.HasIndex("SetID");

                    b.ToTable("Score", (string)null);
                });

            modelBuilder.Entity("Archery.Data.Entity.Set", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("Ordinal")
                        .HasColumnType("int");

                    b.Property<int>("TournamentID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("TournamentID");

                    b.HasIndex("Ordinal", "TournamentID")
                        .IsUnique();

                    b.ToTable("Set", (string)null);
                });

            modelBuilder.Entity("Archery.Data.Entity.Team", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Team", (string)null);
                });

            modelBuilder.Entity("Archery.Data.Entity.Tournament", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTimeOffset>("EndTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("LaneID")
                        .HasColumnType("int");

                    b.Property<int>("LeagueID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("StartTime")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("ID");

                    b.HasIndex("LaneID");

                    b.HasIndex("LeagueID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Tournament", (string)null);
                });

            modelBuilder.Entity("Archery.Data.Entity.Player", b =>
                {
                    b.HasOne("Archery.Data.Entity.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Archery.Data.Entity.Team", "Team")
                        .WithMany("Players")
                        .HasForeignKey("TeamID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Archery.Data.Entity.Reservation", b =>
                {
                    b.HasOne("Archery.Data.Entity.Team", "Team")
                        .WithMany("Reservations")
                        .HasForeignKey("TeamID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Archery.Data.Entity.Tournament", "Tournament")
                        .WithMany("Reservations")
                        .HasForeignKey("TournamentID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Team");

                    b.Navigation("Tournament");
                });

            modelBuilder.Entity("Archery.Data.Entity.Score", b =>
                {
                    b.HasOne("Archery.Data.Entity.Player", "Player")
                        .WithMany("Scores")
                        .HasForeignKey("PlayerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Archery.Data.Entity.Set", "Set")
                        .WithMany("Scores")
                        .HasForeignKey("SetID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Player");

                    b.Navigation("Set");
                });

            modelBuilder.Entity("Archery.Data.Entity.Set", b =>
                {
                    b.HasOne("Archery.Data.Entity.Tournament", "Tournament")
                        .WithMany("Sets")
                        .HasForeignKey("TournamentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tournament");
                });

            modelBuilder.Entity("Archery.Data.Entity.Tournament", b =>
                {
                    b.HasOne("Archery.Data.Entity.Lane", "Lane")
                        .WithMany("Tournaments")
                        .HasForeignKey("LaneID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Archery.Data.Entity.League", "League")
                        .WithMany("Tournaments")
                        .HasForeignKey("LeagueID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lane");

                    b.Navigation("League");
                });

            modelBuilder.Entity("Archery.Data.Entity.Lane", b =>
                {
                    b.Navigation("Tournaments");
                });

            modelBuilder.Entity("Archery.Data.Entity.League", b =>
                {
                    b.Navigation("Tournaments");
                });

            modelBuilder.Entity("Archery.Data.Entity.Player", b =>
                {
                    b.Navigation("Scores");
                });

            modelBuilder.Entity("Archery.Data.Entity.Set", b =>
                {
                    b.Navigation("Scores");
                });

            modelBuilder.Entity("Archery.Data.Entity.Team", b =>
                {
                    b.Navigation("Players");

                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("Archery.Data.Entity.Tournament", b =>
                {
                    b.Navigation("Reservations");

                    b.Navigation("Sets");
                });
#pragma warning restore 612, 618
        }
    }
}
